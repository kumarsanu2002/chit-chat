{"version":3,"sources":["Redux/chatSlice.js","Config/firebase.js","Components/SidebarChat/SidebarChat.js","Redux/userSlice.js","Components/Sidebar/Sidebar.js","Components/Message/Message.js","Components/Chat/Chat.js","Components/Imessage/Imessage.js","Components/Login/Login.js","App.js","Redux/store.js","serviceWorker.js","index.js"],"names":["chatSlice","createSlice","name","initialState","chatId","chatName","reducers","setChat","state","action","payload","actions","selectChatId","chat","selectChatName","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","dispatch","useDispatch","useState","chatInfo","setChatInfo","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","onClick","Avatar","src","photo","message","timestamp","timeago","Date","toDate","toLocaleString","userSlice","user","login","logout","selectUser","LightTooltip","withStyles","theme","tooltip","backgroundColor","palette","common","white","color","boxShadow","shadows","fontSize","Tooltip","Sidebar","useSelector","open","setOpen","setChatName","search","setSearch","handleClose","filteredChats","filter","includes","toLowerCase","Modal","aria-labelledby","aria-describedby","onClose","Fade","in","TextField","value","onChange","e","target","label","variant","margin","Button","add","title","signOut","type","placeholder","key","Message","forwardRef","ref","contents","email","displayName","uid","Chat","handleOpen","useTheme","matches","useMediaQuery","breakpoints","down","input","setInput","messages","setMessages","useRef","sendMessage","preventDefault","FieldValue","serverTimestamp","current","scrollTo","scrollHeight","IconButton","Imessage","SwipeableDrawer","anchor","onOpen","Login","alt","signInWithPopup","catch","err","alert","App","onAuthStateChanged","authUser","photoURL","configureStore","reducer","userReducer","chatReducer","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.acf65828.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const chatSlice = createSlice({\n  name: \"name\",\n  initialState: {\n    chatId: null,\n    chatName: null\n  },\n  reducers: {\n    setChat: (state, action) => {\n      state.chatId = action.payload.chatId;\n      state.chatName = action.payload.chatName;\n    }\n  }\n});\n\nexport const { setChat } = chatSlice.actions;\n\nexport const selectChatId = state => state.chat.chatId;\nexport const selectChatName = state => state.chat.chatName;\n\nexport default chatSlice.reducer;\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDIl4AlC-HK6SoI9AymHLz0kkTlqYGW1wU\",\n  authDomain: \"clone-f66e7.firebaseapp.com\",\n  projectId: \"clone-f66e7\",\n  storageBucket: \"clone-f66e7.appspot.com\",\n  messagingSenderId: \"737438890513\",\n  appId: \"1:737438890513:web:31428caa9dc86fe1054fb0\",\n  measurementId: \"G-4L972NGMB8\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider(); //for auth signup\n\nexport { auth, provider };\nexport default db;\n","import React, { useState, useEffect } from \"react\";\nimport \"./SidebarChat.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport { setChat } from \"../../Redux/chatSlice\";\nimport db from \"../../Config/firebase\";\nimport * as timeago from \"timeago.js\";  //it time ago library we need to  install  using npm\n\n\n        //main  fuction\n        //here we need id and chatNme/group so that we can link it with out sidebar\nconst SidebarChat = ({ id, chatName }) => {\n  const dispatch = useDispatch();\n  //this is to store message that we send.all also collect all info like  photo\n  const [chatInfo, setChatInfo] = useState([]); //this is to show last message and to assign all data from firebase to particlar box.like-image\n  //ths is to show last message and use id so that last message of that particular will show .we will fatch info form db\n  useEffect(() => {\n    db.collection(\"chats\")\n      .doc(id)\n      .collection(\"messages\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot(snapshot =>\n        setChatInfo(\n          snapshot.docs.map(doc => {\n            return doc.data();\n          })\n        )\n      );\n  }, [id]);\n   //return call\n  return (\n    <div\n      className=\"sidebarChat\"\n      onClick={() => {          //on clicking dispach setchat with unique id and chatname\n        dispatch(\n          setChat({\n            chatId: id,\n            chatName: chatName\n          })\n        );\n      }}\n    >\n      <Avatar src={chatInfo[0]?.photo} />    {/* we will get avtar image from chatinfo that is from firebase when they sign in . [0] means first person */}\n      \n              {/* LAST MESSAGE AND  TIME STAMP */}\n      <div className=\"sidebarChat__info\">\n        <h3>{chatName}</h3>           {/*GROUP NAME */}\n        <p>{chatInfo[0]?.message}</p>  {/*LAST SEND MESSAGE */}\n        <small>           {/*TIME STAMP */}\n          {chatInfo[0]?.timestamp          //WE CAN SEE TIME STAMP FORMATE ONLINE NO NEES TO REMEMBER JUST SEE\n            ? timeago.format(\n                new Date(chatInfo[0]?.timestamp?.toDate()).toLocaleString()\n              )\n            : \"\"}\n        </small>\n      </div>\n    </div>\n  );\n};\n\nexport default SidebarChat;\n ","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: state => {\n      state.user = null;\n    }\n  }\n});\n\nexport const { logout, login } = userSlice.actions;\n\nexport const selectUser = state => state.user.user;\n\nexport default userSlice.reducer;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Sidebar.css\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { Tooltip, TextField, Button } from \"@material-ui/core\";\nimport SidebarChat from \"../SidebarChat/SidebarChat\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../../Redux/userSlice\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport db, { auth } from \"../../Config/firebase\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Fade from \"@material-ui/core/Fade\";\nconst LightTooltip = withStyles(theme => ({\n  tooltip: {\n    backgroundColor: theme.palette.common.white,\n    color: \"rgba(0, 0, 0, 0.87)\",\n    boxShadow: theme.shadows[1],\n    fontSize: 11\n  }\n}))(Tooltip);\nconst Sidebar = () => {\n  const user = useSelector(selectUser);\n  const [chat, setChat] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [chatName, setChatName] = useState(\"\");\n  const [search, setSearch] = useState(\"\");\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  useEffect(() => {\n    db.collection(\"chats\").onSnapshot(snapshot =>\n      setChat(\n        snapshot.docs.map(doc => {\n          return {\n            id: doc.id,\n            data: doc.data()\n          };\n        })\n      )\n    );\n  }, []);\n  const addChannel = () => {\n    if (chatName) {\n      db.collection(\"chats\").add({\n        chatName: chatName\n      });\n      setChatName(\"\");\n      handleClose();\n    }\n  };\n  const filteredChats = chat.filter(chat => {\n    return chat.data.chatName.includes(search.toLowerCase());\n  });\n  return (\n    <div className=\"sidebar\">\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        open={open}\n        onClose={handleClose}\n        className=\"sidebar__addChatModal\"\n      >\n        <Fade in={open}>\n          <div className=\"sidebar__addChatModalContainer\">\n            <h2>Add Channel</h2>\n            <TextField\n              value={chatName}\n              onChange={e => setChatName(e.target.value)}\n              id=\"outlined-basic\"\n              label=\"Enter Channel Name\"\n              variant=\"outlined\"\n              margin=\"dense\"\n            />\n            <Button onClick={addChannel} className=\"sidebar__addChannelButton\">\n              Add Channel\n            </Button>\n          </div>\n        </Fade>\n      </Modal>\n      <div className=\"sidebar__header\">\n        <LightTooltip title=\"Logout\">\n          <Avatar\n            onClick={() => auth.signOut()} //signout the user so the listener in app.js will\n            //dispatch the logout action\n            src={user.photo}\n            className=\"sidebar__avatar\"\n          />\n        </LightTooltip>\n\n        <div className=\"sidebar__input\">\n          <SearchIcon />\n          <input\n            value={search}\n            onChange={e => setSearch(e.target.value)}\n            type=\"text\"\n            placeholder=\"Search\"\n          />\n        </div>\n      </div>\n      <div className=\"sidebar__actions\">\n        <Button onClick={() => auth.signOut()}>SignOut</Button>\n        <Button onClick={handleOpen}>Add Chat</Button>\n      </div>\n      <div className=\"sidebar__chats\">\n        {filteredChats.map(({ id, data: { chatName } }) => {\n          return <SidebarChat key={id} id={id} chatName={chatName} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React, { forwardRef } from \"react\";\nimport \"./Message.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport { selectUser } from \"../../Redux/userSlice\";\nimport { useSelector } from \"react-redux\";\nimport * as timeago from \"timeago.js\";\n                  //forwardRef if for animation of message using react flip move see it dcoumentation\nconst Message = forwardRef(\n  (\n           //it to collect all information which we will use\n    { id, contents: { timestamp, displayName, email, photo, message, uid } },\n    ref //for chat animation\n  ) => {\n    const user = useSelector(selectUser);\n    return (\n       // user.email==email =>thid is so that if user send message then color will be bule and if other person send this thwn normal color and cahnge color in css \n      <div\n        ref={ref}          \n        className={`message ${user.email === email && \"message__sender\"}`}\n      >\n        <Avatar src={photo} className=\"message__photo\" />\n        <p>{message}</p>\n        <small>\n          {timestamp\n            ? timeago.format(new Date(timestamp?.toDate()).toLocaleString())\n            : \"\"}\n        </small>\n      </div>\n    );\n  }\n);\n\nexport default Message;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./Chat.css\";\nimport { IconButton } from \"@material-ui/core\";\n\nimport Message from \"../Message/Message\";\nimport { selectChatName, selectChatId } from \"../../Redux/chatSlice\";\nimport { useSelector } from \"react-redux\";\nimport db from \"../../Config/firebase\";\nimport firebase from \"firebase\";\nimport { selectUser } from \"../../Redux/userSlice\";\nimport FlipMove from \"react-flip-move\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport SendIcon from '@material-ui/icons/Send';\n\n\nconst Chat = ({ handleOpen }) => {      //handle open because when we open or click on that group then this chat will open\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"xs\"));\n  const [input, setInput] = useState(\"\");\n  const chatName = useSelector(selectChatName);  //To--{chatName}\n  const chatId = useSelector(selectChatId);//to select chat id\n  const user = useSelector(selectUser);//to select particular user,and also to use this to see which user send wich message and clicking that user we ger caht of that user  \n  const [messages, setMessages] = useState([]); //this for that when we click on particular group then that group chat should open\n  const ref = useRef(null);  //it to when there is  lot of message then it will autonmatically scroll to down,it is react tool\n  useEffect(() => {\n    if (chatId) {   //to catch particular group chat using id\n      db.collection(\"chats\") //db is data base so that our chat get store in database\n        .doc(chatId)\n        .collection(\"messages\")//acess messages\n        .orderBy(\"timestamp\", \"asc\")\n        .onSnapshot(snapshot =>\n          setMessages(\n            snapshot.docs.map(doc => {\n              return {\n                id: doc.id,\n                data: doc.data()\n              };\n            })\n          )\n        );\n    }\n  }, [chatId]);\n  const sendMessage = e => {\n    e.preventDefault();\n    //firebase magic\n    //to collect chat\n    if (input) {     //this is to  send message and it will factch all  info from input\n      db.collection(\"chats\")\n        .doc(chatId)\n        .collection(\"messages\")\n        .add({\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n          message: input,\n          uid: user.uid,\n          photo: user.photo,  //to get avtar of user form google account\n          email: user.email,\n          displayName: user.displayName\n        });\n        //after sending message input will get empty\n      setInput(\"\");\n      ref.current.scrollTo(0, ref.current.scrollHeight + 100);     //scroll \n    }\n  };\n  return (\n    <div className=\"chat\">\n      <div className=\"chat__header\">\n        {matches && <MenuIcon onClick={handleOpen} />}\n        <h4>\n          To: <span className=\"chat__name\">{chatName || \"Select Chats\"}</span>\n        </h4>\n      </div>\n      <div className=\"chat__messages\" ref={ref}>\n      {/*IT IS REACT FLIP MOVE LIBRARY  to make chat message animation */}\n        <FlipMove> \n          {messages.map(({ id, data }) => {\n            return <Message key={id} id={id} contents={data} />;\n          })}\n        </FlipMove>\n      </div>\n      <div className=\"chat__input\">\n        <form>\n          <input\n            value={input}\n            onChange={e => setInput(e.target.value)}\n            type=\"text\"\n            placeholder=\"Send Message\"\n          ></input>\n          <button type=\"submit\" onClick={sendMessage}>\n            Send Message\n          </button>\n        </form>\n       {/*using this we can send message using icon as well as using send button which if not visible */}\n        <IconButton type=\"submit\" onClick={sendMessage} >\n          <SendIcon className='chat__mic' />\n        </IconButton> \n      \n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","import React, { useState } from \"react\";\nimport \"./Imessage.css\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport Chat from \"../Chat/Chat\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\n\nconst Imessage = () => {\n  const theme = useTheme(); //for theme\n  const matches = useMediaQuery(theme.breakpoints.down(\"xs\")); //to set point after which it will be act like drop down button\n  const [open, setOpen] = useState(true); ///function to change state\n  return (\n    <div className=\"Imessage\">\n     {/*matches=it is a point after which chat app change design */}\n      {matches ? (   //when match will be ture then it will open in mobile version elese if it doesnt matches then simply sidebar and chatbar will be shown\n        <SwipeableDrawer       //this is basically dropdown when our app will in small size then it will be used as drop down fuction\n          className=\"Imessage__swiper\"\n          anchor=\"left\"\n          open={open}\n          onClose={() => setOpen(false)}\n          onOpen={() => setOpen(true)}\n        >         \n          <Sidebar />   {/*here sidebar is in <SwiperableDrawer> because in will be in drop down fuction */}\n        </SwipeableDrawer>\n      ) : (\n        <Sidebar />     //sidebar will be shown here\n      )}\n             {/*when caht part will open then setopen function will be assign ture */}\n      <Chat handleOpen={() => setOpen(true)} /> \n    </div>\n  );\n};\n\nexport default Imessage;\n","import React from \"react\";\nimport \"./Login.css\";\nimport { Button } from \"@material-ui/core\";\nimport { auth, provider } from \"../../Config/firebase\";\n\nconst Login = () => {\n  \n  const signIn = e => {\n    e.preventDefault();\n    //   before this enable the authentication in your firebase and select the google //method\n\n    // signin with the auth protocol //This will update the authUser and in App.js will listen to\n    // whenever the user changes\n    auth.signInWithPopup(provider).catch(err => alert(err.message));\n  };\n  return (\n    <div className=\"login\">\n      <div className=\"login__container\">\n         <img src=\"https://lh3.googleusercontent.com/5BjJo4ffycb9cSba9_dq5UE07Y3SvL3fw4gOoZAzQyjfnwC1d_7dxyKHHr2VmunLDg\" alt=\"logo\" />\n        <div className=\"login__text\">\n          <h1>CHIT-CHAT</h1>\n        </div>\n        <Button type=\"submit\" onClick={signIn}>\n          Sign in With Google\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport Imessage from \"./Components/Imessage/Imessage\";\nimport { selectUser, login, logout } from \"./Redux/userSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Login from \"./Components/Login/Login\";\nimport { auth } from \"./Config/firebase\";\nfunction App() {\n  const user = useSelector(selectUser);//this is to select user\n  const dispatch = useDispatch(); //it is tool to use logout and login fuction\n  useEffect(() => {\n    auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        //user if login\n        dispatch(\n          login({ //imported from usesilce\n            uid: authUser.uid,\n            photo: authUser.photoURL,     //all this form google authentication\n            email: authUser.email,\n            displayName: authUser.displayName\n          })\n        );\n      } else {\n        //user is loged out\n        dispatch(logout());\n      }\n    });\n  }, [dispatch]);\n\n\n  return <div className=\"app\">{user ? <Imessage /> : <Login />}</div>;\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport userReducer from \"./userSlice\";\nimport chatReducer from \"./chatSlice\";\nexport default configureStore({\n  reducer: {\n    user: userReducer,\n    chat: chatReducer\n  }\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./Redux/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}